#!/bin/sh
########10########20########30## DOCUMENTATION #50########60########70########80
#
# OVERVIEW
# ========
# 
# REPOsitory MANager
# 
# repoman is a tool for managing and interacting with toolchest repositories. 
# 
# USAGE
# =====
# 
# repoman [directive] [target]
# 
# Directives: 
# 
# list-active . . . . . List currently active repositories.
# 
# list-installed  . . . List all installed repositories.
# 
# install [url] . . . . If the URL is a git repository, it will be cloned into 
#                       the repo storage directory. 
#                       
# activate [url]  . . . Activate an installed repository so packages may be 
#                       installed from it. 
# 
# deactivate [repo] . . Deactivate a repository (removes symlink only, does
#                       not delete). The toolchest will uninstall any packages
#                       present in the repo.
# 
# uninstall [repo]  . . Delete a repo from disk (use care, no prompt is given).
# 
# update  . . . . . . . For each installed repo, run `repoman update $repo`.
# 
# update [repo] . . . . cd into the repo and run `git pull`. If .repoman.cfg
#                       defines REPOMAN_UPDATE_COMMAND, that will be executed
#                       instead.
# 
# help  . . . . . . . . display this message
# 
# 
# CONFIGURING REPOSITORIES
# ========================
# 
# Repositories may be configured by placing a file ".repoman.cfg" in the top
# level directory of the repo. Any keys not given in this file are assumed to
# have the default values specified here. If this file is not present, the
# default values are assumed for all keys.
# 
# Keys are:
# 
#   REPOMAN_REPO_DIR . . . . Path to the directory where packages are kept,
#                            this may be handy for placing packages in
#                            alternate folders (eg. packages/ relative to
#                            project root). The default repo dir is the top
#                            level directory of the git repo (or tarball)
#                            
#   REPOMAN_REPO_NAME  . . . Explicit name for the repository. Default value
#                            is the directory name of the top level directory
#                            of the project.
#                            
#   REPOMAN_UPDATE_COMMAND . Override the command used to update this repo,
#                            useful if you need to `git pull` from a specific
#                            branch.
#   
# NOTES
# =====
# 
# Also note that repoman ignores repositories which it does not manage, this
# includes the net.cdaniels.toolchest.* which comes with the default toolchest
# installation. Repoman identifies it's own repositories by checking for the
# existence of a file named `.repoman` under the repository's top-level 
# directory. 
#                  
#  
########10########20########30##### LICENSE ####50########60########70########80
# Copyright (c) 2017, Charles Daniels
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, 
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its 
# contributors may be used to endorse or promote products derived from this 
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.
########10########20########30########40########50########60########70########80

DIRECTIVE="$1"
TARGET="$2"

# make sure we can locate the toolchest
TOOLCHEST_CMD="acquire-toolchest-dirs"
which "$TOOLCHEST_CMD" 2>&1 | grep "$TOOLCHEST_CMD" | grep -v "which: no" > /dev/null 
if [ $? -ne 0 ] ; then
  echo "ERROR 99: unable to locate toolchest runtime components!"
  exit 1
fi


if [ "$DIRECTIVE" = "help" ] ; then
  toolchest-doc $0
  exit $?
fi

$(acquire-toolchest-dirs)

REPOMAN_DIR="$NET_CDANIELS_TOOLCHEST_LOCAL/repoman"

# validate the repo storage directory exists
if [ ! -d "$REPOMAN_DIR" ] ; then
  echo "INFO: repoman directory ($REPOMAN_DIR) does not exist, it will be created."
  mkdir "$REPOMAN_DIR"
  if [ $? -ne 0 ] ; then
    echo "ERROR 127: failure to create directory '$REPOMAN_DIR'"
    exit 1
  fi
fi

case "$DIRECTIVE" in
  list-active) 
    for repo in "$NET_CDANIELS_TOOLCHEST_PACKAGES"/* ; do
      if [ -e "$repo/.repoman" ] ; then
        echo `basename "$repo"`
      fi
    done
  ;;

  activate)
    for repo in "$REPOMAN_DIR" ; do
      REPOMAN_REPO_NAME="`basename $repo`"
      REPOMAN_REPO_DIR="$repo"
      if [ -e "$repo/.repoman.cfg" ] ; then
        . "$repo/.repoman.cfg"
      if [ "$TARGET" = "$REPOMAN_REPO_NAME" ] ; then
        ln -s "$repo/$REPOMAN_REPO_DIR" \
              "$NET_CDANIELS_TOOLCHEST_PACKAGES/$REPOMAN_REPO_NAME"
        exit
      fi
    done

    echo "ERROR 161: failure to activate repository '$TARGET' (did you remember to install it first?)"
    exit 1

  ;;

  install)
    cd "$REPOMAN_DIR"
    check-command-exists git
    if [ $? -ne 0 ] ; then
      echo "ERROR 170: git is not present on this system, repoman install has been disabled"
      exit 1
    fi

    # git clone the repo
    echo "INFO: retrieving repository... "
    git clone "$TARGET"
    if [ $? -ne 0 ] ; then
      echo "ERROR 176: failue to retrieve repository '$TARGET'"
      exit 1
    fi
    echo "INFO: finished retrieving repository."

esac