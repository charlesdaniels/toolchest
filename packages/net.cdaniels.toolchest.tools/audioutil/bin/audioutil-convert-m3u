#!/usr/bin/env python
########10########20########30## DOCUMENTATION #50########60########70########80
#
# OVERVIEW
# ========
# 
# This script updates all files in a given .m3u file to have the same extension.
# This is useful when used in conjunction with audioutil-recode for batch
# processing. It is used by audioutil-publish to repair broken references in 
# m3u files. 
# 
# Note that the "new extension" should not include the ".", i.e. use "mp3" 
# rather than ".mp3".
# 
# This may break with very large playlists, especially on systems with little
# memory. This is because this script does not "stream" the file, rather then
# entire playlist is read into memory all at once, modified in place, then 
# written back out. 
# 
# USAGE
# =====
# 
#   $1 . . . file to repair
#   $2 . . . new extensions for media files
#  
########10########20########30##### LICENSE ####50########60########70########80
#  Copyright (c) 2017, Charles Daniels
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
########10########20########30########40########50########60########70########80

import sys
import os
import subprocess

if len(sys.argv) < 2: 
  sys.stderr.write("ERROR 53: invalid parameter count!\n")
  print(subprocess.check_output(["toolchest-doc", sys.argv[0]]))
  exit(1)

target_file = sys.argv[1]
new_extension = sys.argv[2]

if not os.path.isfile(target_file):
  sys.stderr.write("ERROR 66: input file '{}' fails to exist"
                   .format(target_file))
  exit(1)

new_lines = []
with open(target_file, 'r') as f:
  for line in f:
    if line[0] == "#":
      # this is a comment, ignore it
      new_lines.append(line)
    else:
      basename = os.path.splitext(line)[0]
      new_lines.append(basename + "." + new_extension + "\n")

with open(target_file, 'w') as f:
  for line in new_lines:
    f.write(line)



