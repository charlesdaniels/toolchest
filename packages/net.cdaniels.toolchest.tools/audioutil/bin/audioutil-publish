#/bin/sh
########10########20########30## DOCUMENTATION #50########60########70########80
#
# OVERVIEW
# ========
# 
# This script will translate an entire audio library, in a recursive fashion. 
# It will call audioutil-recode on each song found in the library. . 
# 
# In effect, this creates a mirror of a given audio library, but with all music
# being converted to the same container and encoding formats. This is handy
# when "exporting" a music library to a client device, such as an MP3 player. 
# 
# The following files are considered to be audio files by this script:
# 
# * mp3
# * ogg
# * flac
# * opus
# * m4a
# 
# The following file types will be copied, but not modified
# 
# * jpg
# * png
# * txt
# * nfo
# * m3u
# 
# Encoding support will depend on your system's ffmpeg. 
# 
#   
# USAGE
# =====
# 
#   $1 . . . input directory
#   $2 . . . output directory
#   $3 . . . (optional) output file extension (default: mp3)
#   $4 . . . (optional) encoding library to use (default: libmp3lame)
#   $5 . . . (optional) bitrate to use (default: 128k)
#   $6 . . . (optional) if equal to "dryrun", batch is displayed instead of 
#            executed
#   
# NOTES
# =====
# 
# Initially, this script would spawn an ffmpeg process in the background for
# each media file. This predictably worked very poorly for large media files.
# It would seem that XNU does not take kindly to fork()-ing 3700 threads at
# the same time.
# 
# As a result, it was re-written to generate a batch file, then use GNU
# parallel to execute each command in the batch, this results in only one 
# ffmpeg instance being spawned per core; still a lot of load on the system, but
# a manageable load. 
# 
# BUGS/TODO
# =========
# 
# * output library sometimes has less files than input, may warrant
#   investigation
#     
# * metadata does not seem to be preserved in when converting to/from certain
#   formats; this may be an ffmpeg issue; a fix has been added to audioutil-
#   recode, but it's not clear how well it works yet.
#  
########10########20########30##### LICENSE ####50########60########70########80
#  Copyright (c) 2017, Charles Daniels
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
########10########20########30########40########50########60########70########80

if [ $# -lt 2 ] ; then
  echo "ERROR 68: parameter mismatch error"
  toolchest-doc "$0"
  exit 1
fi

if [ $# -ge 3 ] ; then
  FILE_EXTENSION="$3"
else
  FILE_EXTENSION="mp3"
fi

if [ $# -ge 4 ] ; then 
  ENCODING_LIBRARY="$4"
else
  ENCODING_LIBRARY="libmp3lame"
fi

if [ $# -ge 5 ] ; then
  BITRATE="$5"
else
  BITRATE="128k"
fi

INPUT_DIR="$1"
OUTPUT_DIR="$2"
STARTING_DIR="`pwd`"


if [ ! -d "$INPUT_DIR" ] ; then
  echo "ERROR 77: input directory fails to exist"
  exit 1
fi

if [ ! -d "$OUTPUT_DIR" ] ; then
  mkdir -p "$OUTPUT_DIR"
fi

INPUT_DIR="`realpath "$INPUT_DIR"`"
OUTPUT_DIR="`realpath "$OUTPUT_DIR"`"
BATCH_FILE="/tmp/audioutil-publish-batch_`iso8601date`"

export AUDIOUTIL_PUBLISH_BATCHFILE="$BATCH_FILE"

echo "INFO: input directory is: $INPUT_DIR"
echo "INFO: output directory is: $OUTPUT_DIR"
cd "$INPUT_DIR"

echo "INFO: mirroring directory structure... "

# first, we mirror the directory structure
find ./ -type d -exec echo "mkdir -p \"$OUTPUT_DIR/{}\"" \; | parallel --will-cite --bar 

# files to re-encode
echo "INFO: generating batch jobs... "
find . -type f -iname "*.mp3" \
  -or -iname "*.ogg"  \
  -or -iname "*.opus" \
  -or -iname "*.m4a"  \
  -or -iname "*.flac" \
  -exec echo "audioutil-recode \"$INPUT_DIR/{}\" \"$OUTPUT_DIR/{}.$FILE_EXTENSION\" $ENCODING_LIBRARY $BITRATE > /dev/null 2>&1" \; \
  > "$BATCH_FILE"

# files to copy
find . -type f -iname "*.jpg" \
  -or -iname "*.png"  \
  -or -iname "*.txt" \
  -or -iname "*.nfo"  \
  -or -iname "*.m3u" \
  -exec echo "cp \"$INPUT_DIR/{}\" \"$OUTPUT_DIR/{}\" > /dev/null 2>&1" \; \
  >> "$BATCH_FILE"

# find m3u file for repair
find . -type f -iname "*.m3u" \
  -exec echo "audioutil-convert-m3u \"$OUTPUT_DIR/{}\" $FILE_EXTENSION" \; \
  >> "$BATCH_FILE"

echo "INFO: generated `wc -l < $BATCH_FILE` jobs"

echo "INFO: recoding files... "
if [ "$6" = "dryrun" ] ; then
  cat "$BATCH_FILE"
else
  parallel --will-cite --bar < "$BATCH_FILE"
fi

rm "$BATCH_FILE"