#!/bin/sh
########10########20########30## DOCUMENTATION #50########60########70########80
#
# OVERVIEW
# ========
# 
# Package management component of net.cdaniels.toolchest. This script backs
# the "package" directive of the toolchest management utility. 
#
########10########20########30##### LICENSE ####50########60########70########80
# Copyright (c) 2017, Charles Daniels
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, 
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its 
# contributors may be used to endorse or promote products derived from this 
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.
########10########20########30########40########50########60########70########80

if ! (: "${NET_CDANIELS_TOOLCHEST_DIR?}") 2>/dev/null; then
  echo "ERROR P41: NET_CDANIELS_TOOLCHEST_DIR is not defined"
  exit 1
fi

$("$NET_CDANIELS_TOOLCHEST_DIR/bin/acquire-toolchest-dirs")
PACKAGE_LIST="$NET_CDANIELS_TOOLCHEST_DIR/local/config/packages.list"
source "$NET_CDANIELS_TOOLCHEST_LIB/toolchest-package.lib"
if [ $? -ne 0 ] ; then
  echo "ERROR TP 44: failure to locate toolchest-package.lib"
  exit 1
fi

VERB="$1"
shift
PACKAGE="$1"
if [ $# -ge 1 ] ; then
  shift
fi

PKG_DIR="$NET_CDANIELS_TOOLCHEST_DIR/packages/`get_package_repo $PACKAGE`/$PACKAGE"

case "$VERB" in
  list)
    cd "$NET_CDANIELS_TOOLCHEST_DIR/packages"

    for repo in ./* ; do  # loop over each repository 
      cwd=`pwd`
      if [ ! -d "$repo" ] ; then
        # repo may be a broken symlink or empty
        continue 
      fi

      cd "$repo"
      for package in ./* ; do  # loop over each package
        if [ ! -d "$package" ] ; then
          # repo may be empty, or package a broken symlink
          continue
        fi

        PACKAGE_NAME="`basename $package`"
        REPO_NAME="`get_package_repo $PACKAGE_NAME`"
        PACKAGE_PATH="$NET_CDANIELS_TOOLCHEST_DIR/packages/$REPO_NAME/$PACKAGE_NAME"

        printf "%30s/%-30s" "$REPO_NAME" "$PACKAGE_NAME"

        # display package brief if one is present
        if [ -f "$PACKAGE_PATH/brief.txt" ] ; then
          echo " - `cat $PACKAGE_PATH/brief.txt`"
        else
          echo ""
        fi
      done
      cd "$cwd"
    done
  ;;
  desc)
    toolchest package description $PACKAGE
  ;;
  description)
    DESCFILE="$PKG_DIR/description.txt"
    if [ -e "$DESCFILE" ] ; then
      cat $DESCFILE
    else
      echo "ERROR T370: no description provided for $PACKAGE"
      exit 1
    fi
  ;;
  install)

    # make sure the package is not already installed
    check_package_installed "$PACKAGE"
    if [ $? -eq 0 ] ; then
      echo "ERROR T526: package $PACKAGE is already installed. If this is"
      echo "            not correct, you may mark it as uninstalled using"
      echo "            \"toolchest internal package mark-uninstalled $PACKAGE\""

      if [ $# -ge 1 ] ; then
        $0 package install "$@"
        exit $?
      else
        exit 1
      fi
    fi

    # handle dependancy checking
    if [ -e "$PKG_DIR/dep" ] ; then

        # system dependencies 
        if [ -f "$PKG_DIR/dep/system" ] ; then
          # validate system dependencies
          while read -r line ; do
            printf "INFO: verifying $line is present... "
            command -v $line > /dev/null
            if [ $? -ne 0 ] ; then
              echo "FAIL"
              echo "ERROR T699: dependancy $line is not present on the system"
              exit 1
            fi
            echo "OK"
          done < "$PKG_DIR/dep/system"
        fi  # if [ -f "$PKG_DIR/dep/system" ] ; then

        # toolchest package dependencies 
        if [ -f "$PKG_DIR/dep/toolchest" ] ; then
          # attempt to install toolchest dependencies
          while read -r line ; do
            printf "INFO: verifying package $line is installed... "
            toolchest package list-installed | grep $line > /dev/null
            # grep will return nonzero if the string is not found
            if [ $? -eq 0 ] ; then
              # package is already marked installed
              echo "OK"
            else
              # package not installed, try installing it
              echo "NOT PRESENT"
              echo "INFO: will attempt to install package $line"
              # perform the install
              toolchest package install $line
              if [ $? -ne 0 ] ; then
                echo "ERROR T717: failed to install dependency $line"
                exit 1
              fi
            fi
          done < "$PKG_DIR/dep/toolchest"
        fi  # if [ -f "$PKG_DIR/dep/toolchest" ] ; then

        # handle OS validation
        if [ -f "$PKG_DIR/dep/uname" ] ; then
          printf "INFO: validating OS requirements... "
          grep `uname` < "$PKG_DIR/dep/uname" > /dev/null
          if [ $? -eq 0 ] ; then
            echo "OK"
          else
            echo "ERROR: OS `uname` is not supported by this package!"
            exit 1
          fi
        fi  # if [ -f "$PKG_DIR/dep/uname" ] ; then

        # attempt to download any artifacts required
        if [ -f "$PKG_DIR/dep/remote" ] ; then
          mkdir "$PKG_DIR/remote"
          DOWNLOAD_CMD="$NET_CDANIELS_TOOLCHEST_DIR/bin/download"
          if [ ! -f "$DOWNLOAD_CMD" ] ; then
            echo "ERROR T789: unable to locate download command"
          else
            while read -r line ; do
              ARTIFACT_NAME=`echo $line | cut -d\  -f 1`
              ARTIFACT_URL=`echo $line | cut -d\  -f 2`
              echo "INFO: preparing to download dependancy: $ARTIFACT_NAME"
              "$DOWNLOAD_CMD" "$ARTIFACT_URL" "$PKG_DIR/remote/$ARTIFACT_NAME"
              if [ $? -eq 0 ] ; then
                echo "INFO: successfully downloaded dependancy $ARTIFACT_NAME."
              else
                echo "ERROR: FAILED to download dependancy $ARTIFACT_NAME"
              fi
            done < "$PKG_DIR/dep/remote"
          fi  # if [ ! -f "$DOWNLOAD_CMD" ] ; then
        fi  # if [ -f "$PKG_DIR/dep/remote" ] ; then

        # perl modules
        if [ -f "$PKG_DIR/dep/perl" ] ; then
          while read -r line ; do
              printf "INFO: validating perl module \"$line\"... "
              perldoc -l "$line" > /dev/null 2>&1
              if [ $? -ne 0 ] ; then 
                  echo "FAIL"
                  echo "ERROR: perl module \"$line\" is not present!"
                  exit 1
              else
                  echo "DONE"
              fi
          done < "$PKG_DIR/dep/perl"
        fi  # if [ -f "$PKG_DIR/dep/perl" ] ; then

    fi  # if [ -e "$PKG_DIR/dep" ] ; then

    # perform the package installation
    install_package "$PACKAGE"

    # handle installation failure
    if [ $? -ne 0 ] ; then
      echo "ERROR T376: installer failed, attempting to clean up."
      uninstall_package "$PACKAGE"
      exit 1
    else
      # mark package installed
      mark_package_installed "$PACKAGE"
    fi

    if [ $# -ge 1 ] ; then
      $0 package install "$@"
    fi
  ;;
  uninstall)
    # make sure the package is actually installed
    check_package_installed "$PACKAGE"
    if [ $? -ne 0 ] ; then
      echo "ERROR T566: package $PACKAGE is not installed. If this is"
      echo "            not correct, you may mark it as installed using"
      echo "            \"toolchest internal package mark-installed $PACKAGE\""

      if [ $# -ge 1 ] ; then
        $0 package uninstall "$@"
        exit $?
      else
        exit 1
      fi
    fi

    uninstall_package "$PACKAGE"
    RET=$?

    if [ $RET -eq 0 ] ; then
      # installed succeeded, mark uninstalled
      mark_package_uninstalled "$PACKAGE"
      exit 0
    else
      # handle case where the package failed to be uninstalled
      echo "ERROR T592: package uninstaller for $PACKAGE failed!"
      exit $RET
    fi

    if [ $# -ge 1 ] ; then
      $0 package uninstall "$@"
    fi

  ;;
  update)
    echo "INFO: updating package $PACKAGE"
    toolchest package uninstall "$PACKAGE"
    toolchest package install "$PACKAGE"
  ;;
  status)
    check_package_installed "$PACKAGE"
    if [ $? -eq 0 ] ; then
      echo "INFO: package $PACKAGE is INSTALLED"
    else
      echo "INFO: package $PACKAGE is NOT installed"
    fi
  ;;
  list-installed)
    if [ ! -f "$PACKAGE_LIST" ] ; then
      echo "INFO: package list not initialized; either no packages are"
      echo "      installed, or your toolchest installation is broken."
    else
      cat "$PACKAGE_LIST"
    fi
  ;;
  *)
    echo "ERROR T282: package verb \"$VERB\" was not recognized"
    exit 1
  ;;
esac

