#!/bin/sh
########10########20########30## DOCUMENTATION #50########60########70########80
#
#  OVERVIEW
#  ========
#
#  Utility for managing and installing toolchest, as well as toolchest packages.
#
#  The toolchest ships with a set of core utilities, kept in the bin/ folder
#  (the same directory as this file). These are scripts and utilities which
#  are used commonly enough by toolchest packages that they need to be present
#  always. They are usually bourne shell scripts, and should be portable
#  across any POSIX compliant system.
#
#  The toolchest also ships a set of optional packages, in the packages/
#  directory. These may be installed using `toolchest package install`.
#  Packages may or may not be fully portable, may have their own dependencies,
#  and may even involve compilation. Package install scripts should handle any
#  dependency resolution that is needed.
#
#  Core utilities and libraries are kept in bin/ and lib/ respectively,
#  relative to installation root. local/bin/ and local/lib/ relative to
#  project root hold symlinks to build artifacts from packages. Things in
#  local/ should not be version controlled, but should be re-producible by
#  script (on the same system).
#
#  NOTE ON MULTIPLE INSTALLS
#  =========================
#
#  While technically a supported configuration, it is probably not a good idea
#  to have multiple installs of toolchest (eg. a system and a local install).
#  This may make both installations difficult to manage. Multiple separate
#  users having local installations should not cause any problems however.
#
#  USAGE
#  =====
#
#    package list . . . . . . . . . . . . list available packages
#
#    package install [package]  . . . . . install [package]
#
#    package uninstall [package]  . . . . uninstall [package]
#
#    package update [package] . . . . . . uninstall, then install [package]
#
#    package description [package]  . . . display [package]'s description
#
#    package status [package] . . . . . . check to see if [package] is
#                                         installed
#
#    package list-installed . . . . . . . display a list of packages which
#                                         have been marked as installed to the
#                                         console.
#
#    info . . . . . . . . . . . . . . . . display toolchest's configuration
#
#    version  . . . . . . . . . . . . . . display the toolchest's version
#
#    dir  . . . . . . . . . . . . . . . . display NET_CDANIELS_TOOLCHEST_DIR
#                                         and exit
#
#    refresh  . . . . . . . . . . . . . . refresh the toolchest installation
#                                         by wiping local/ then re-installing
#                                         packages marked as installed. The
#                                         contents of local/config are
#                                         preserved.
#
#    setup  . . . . . . . . . . . . . . . verifies that all needed folders in
#                                         the local/ directory tree exist -
#                                         any that do not are created. On
#                                         successful setup completion, the
#                                         empty file
#
#                                         $NET_CDANIELS_TOOLCHEST_DIR/local/config/setup-done
#
#                                         is created. When the toolchest first
#                                         launches, if this file does not
#                                         exist, then the setup directive is
#                                         executed automatically.
#
#  INTERNAL USE COMMANDS
#  =====================
#
#  These commands are intended for use by expert users and/or as an API to
#  internal toolchest utilities. If you don't have a good understanding of how
#  the toolchest works, you probably should not use these.
#
#    internal package unconditional-install [package]
#
#      Installs [package] unconditionally - package is NOT marked as
#      installed, and installation state is not modified. Does not install or
#      check package dependencies.
#
#    internal package unconditional-uninstall [package]
#
#      Uninstalls [package] unconditionally - package is NOT marked as
#      uninstalled, and installation state is not modified.
#
#
#    internal package mark-uninstalled [package]
#
#      Unconditionally marks a package as not installed, regardless of pre
#      existing installation state.
#
#    internal package mark-installed [package]
#
#      Unconditionally marks a package as installed, reguardless of pre
#      existing installation state.
#
#    internal package get-repo [package]
#
#      Display the repository to which a package belongs to stdout.
#
#  PACKAGES
#  ========
#
#  Packages should reside in directories within packages/ relative to
#  installation root. Each directory must contain one of: makefile, Makefile,
#  install.sh. When `toolchest package install` is run, if a makefile is
#  present in the packages directory, then `make install` will be run.
#  Otherwise `install.sh` will be run. In either case, the calling shell first
#  cds to the top level directory of the package.
#
#  If install.sh is used, it will be passed "$@" which will include argv[3]
#  and on. Further, the following environment variables are guarnteed:
#
#    NET_CDANIELS_TOOLCHEST_DIR . . . root of toolchest installation
#    PACKAGE_NAME . . . . . . . . . . the name of the package being installed
#    PACKAGE_PATH . . . . . . . . . . full path to the package's folder
#
#  The same environment variables are provided when a package is uninstalled.
#
#  If using makefiles, packages should also implement `make uninstall` for de-
#  installation. Packages using install.sh should also make available an
#  uninstall.sh for the same purpose. uninstall.sh and `make uninstall` are
#  called in the same way as their counterparts.
#
#    INSTALLATION STATE
#    ------------------
#
#    Package installation state is stored in the file
#    $NET_CDANIELS_TOOLCHEST_DIR/local/config/packages.list . The path to this
#    file is stored in $PACKAGE_LIST. The package list is a list of package
#    names, one per line, which are currently installed. The contents of the
#    package list are interacted with inside this file by the functions:
#
#      check_package_installed
#
#      mark_package_installed
#
#      mark_package_uninstalled
#
#      dedupe_packages
#
#    The package list is not mean to be modified outside of the toolchest, as
#    the package install and uninstall directives handle the package
#    installation state themselves.
#
#    Package installer and uninstaller scripts should NOT interact with
#    package installation state.
#
#    External scripts or expert users that need to modify package installation
#    state should do so via the internal use commands:
#
#      internal package mark-installed
#
#      internal package mark-uninstalled
#
#    Note that the package install/uninstall directives assume that if the
#    installer/unstaller script(s) for a package return 0, then the
#    install/uninstall operation completed successfully, and assume that it
#    failed on a nonzero exit code. Installer and uninstaller scripts should
#    set their exit codes appropriately.
#
#    DEPENDANCY HANDLING
#    -------------------
#
#    Packages may optionally include a directory named ``dep``, which may
#    contain any, all, or none of the following files:
#
#    system . . . . . a list of commands, one per line, which if they are not
#                     present in $PATH, will cause the installer to fail.
#
#    toolchest  . . . a list of toolchest package, which if they are not
#                     installed, will be installed. Should any dependency
#                     installation fail, the installer will fail.
#
#    uname  . . . . . a list of OS unames, one per line. If at least one does
#                     match `uname` on the current system, the installer will
#                     fail.
#
#    remote . . . . . a list of remote files which need to be downloaded for the
#                     package to install. Each line contains the output file name
#                     and the URL of the file, separated by a single space.
#                     Either CuRL or Wget will be used to download the file,
#                     depending on which is available. The output file will be
#                     placed in a folder named "remote" under the package
#                     directory. Failure to download the dependancy will NOT
#                     cause toolchest to abort the installation - you need
#                     to check for the presencce of your dependancies. 
#
#    Note that both of these files need to end in a blank line to be parsed
#    correctly.
#
#
#  ENVIORNMENT VARIABLES
#  =====================
#
#    NET_CDANIELS_TOOLCHEST_DIR . . . existing toolchest install directory.
#                                     This is the toolchest install that the
#                                     script will manage. This environment
#                                     variable is the supported method for
#                                     managing both a local and a system wide
#                                     installation on the same machine. If not
#                                     set, it will be extrapolated at runtime.
#                                     If only a system or only a local
#                                     installation exists, it will be used. If
#                                     both exist, the local install will be
#                                     preferred.
#
#
#  AUTHOR'S NOTE ON STOW
#  =====================
#
#  Typically, stow would make a lot of sense to use for a project with as much
#  symlinking going on as toolchest. However, in my experience GNU stow is not
#  widely available on many systems. It is not present in the base
#  installation of macOS, nor in the base installation of FreeBSD 11 or Ubuntu
#  16. By removing stow as a dependency, the toolchest should be able to run
#  on a wide variety of systems without needing either root access (to use
#  the package manager) or fooling around with compiling stow from source.
#
#  As someone who has used stow fairly extensively, I very much respect stow
#  and it's capabilities, but sadly re-inventing the wheel in this respect is
#  a design decision I have made to improve portability.
#
#
########10########20########30##### LICENSE ####50########60########70########80
#  Copyright (c) 2016, Charles Daniels
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
########10########20########30########40########50########60########70########80

# realpath re-implementation

########10########20########30##### LICENSE ####50########60########70########80
#
#  The MIT License (MIT)
#
#  Copyright (c) 2014 Michael Kropat
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#
#
#  ---------
#
#  This software used and modified from it's origonal version on 2016-12-31 by
#  Charles Daniels.
#
########10########20########30########40########50########60########70########80


realpath() {
    canonicalize_path "$(resolve_symlinks "$1")"
}

resolve_symlinks() {
    _resolve_symlinks "$1"
}

_resolve_symlinks() {
    _assert_no_path_cycles "$@" || return

    local dir_context path
    path=$(readlink -- "$1")
    if [ $? -eq 0 ]; then
        dir_context=$(dirname -- "$1")
        _resolve_symlinks "$(_prepend_dir_context_if_necessary "$dir_context" "$path")" "$@"
    else
        printf '%s\n' "$1"
    fi
}

_prepend_dir_context_if_necessary() {
    if [ "$1" = . ]; then
        printf '%s\n' "$2"
    else
        _prepend_path_if_relative "$1" "$2"
    fi
}

_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_assert_no_path_cycles() {
    local target path

    target=$1
    shift

    for path in "$@"; do
        if [ "$path" = "$target" ]; then
            return 1
        fi
    done
}

canonicalize_path() {
    if [ -d "$1" ]; then
        _canonicalize_dir_path "$1"
    else
        _canonicalize_file_path "$1"
    fi
}

_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_canonicalize_file_path() {
    local dir file
    dir=$(dirname -- "$1")
    file=$(basename -- "$1")
    (cd "$dir" 2>/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}

# Optionally, you may also want to include:

### readlink emulation ###

readlink() {
    if _has_command readlink; then
        _system_readlink "$@"
    else
        _emulated_readlink "$@"
    fi
}

_has_command() {
    hash -- "$1" 2>/dev/null
}

_system_readlink() {
    command readlink "$@"
}

_emulated_readlink() {
    if [ "$1" = -- ]; then
        shift
    fi

    _gnu_stat_readlink "$@" || _bsd_stat_readlink "$@"
}

_gnu_stat_readlink() {
    local output
    output=$(stat -c %N -- "$1" 2>/dev/null) &&

    printf '%s\n' "$output" |
        sed "s/^‘[^’]*’ -> ‘\(.*\)’/\1/
             s/^'[^']*' -> '\(.*\)'/\1/"
    # FIXME: handle newlines
}

_bsd_stat_readlink() {
    stat -f %Y -- "$1" 2>/dev/null
}
########10########20########30########40########50########60########70########80


TOOLCHEST_VERSION="1.0.1-git"

command -v sed > /dev/null
if [ $? -ne 0 ] ; then
  echo "ERROR T180: command \"sed\" is not available"
  exit 1
fi

# check if NET_CDANIELS_TOOLCHEST_DIR already exists (from env), and if not
# try to detect
if (: "${NET_CDANIELS_TOOLCHEST_DIR?}") 2>/dev/null; then
  printf ""  # do nothing
else
  # this used to be $0/../.. however this breaks on BSD sh, and possible other
  # shells. The sed command matches "toolchest", followed by a line ending,
  # and replaces it with nothing. Although this is uglier, it will work on
  # more systems.
  NET_CDANIELS_TOOLCHEST_DIR=$(realpath `echo $0 | sed 's/toolchest$//g'`/..)
fi

if [ ! -f "$NET_CDANIELS_TOOLCHEST_DIR/local/config/setup-done" ] && \
   [ "$1" != "setup" ]; then
  echo "INFO: performing first time setup."
  $0 setup
  exit $?
fi

# make sure that we are somewhere in $PATH (toolchest likes to recursively
# call itself)
command -v toolchest > /dev/null
if [ $? -ne 0 ] ; then
  echo "ERROR T196: toolchest executable not in \$PATH"
fi

PACKAGE_LIST="$NET_CDANIELS_TOOLCHEST_DIR/local/config/packages.list"

########10########20########30 UTILITY FUNCTIONS 0########60########70########80

#  check_package_installed
#  =======================
#
#  Checks to see if a package has been marked as installed
#
#  USAGE
#  =====
#
#    $1 . . . package name to check
#
#  RETURNS
#  =======
#
#  If the package is installed, the return code is zero. If the package is not
#  installed, the return code is one. If the package list does not exist, the
#  return code is one.
#
check_package_installed () {
  if [ -f "$PACKAGE_LIST" ] ; then
    cat "$PACKAGE_LIST" | grep "$1" > /dev/null
    if [ $? -eq 0 ]  ; then
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

#  mark_package_installed
#  ======================
#
#  Marks a package as installed unconditionally.
#
#  USAGE
#  =====
#
#    $1 . . . the package to mark installed
#
mark_package_installed () {
  check_package_installed "$1"
  if [ $? -eq 0 ] ; then
    # package is already installed
    printf "" # do northing
  else
    # package is not already installed
    echo "$1" >> "$PACKAGE_LIST"
  fi
  dedupe_packages
}

#  dedupe_packages
#  ===============
#
#  Ensure that the package list does not contain any duplicate package names
dedupe_packages () {
  if [ ! -f "$PACKAGE_LIST" ] ; then
    return 1
  fi
  cat "$PACKAGE_LIST" | sort | uniq > "$PACKAGE_LIST.tmp"
  mv "$PACKAGE_LIST.tmp" "$PACKAGE_LIST"
}

#  mark_package_uninstalled
#  ========================
#
#  Mark a package as uninstalled unconditionally.
#
#  USAGE
#  =====
#
#    $1 . . . the package to mark uninstalled
mark_package_uninstalled () {
  if [ ! -f "$PACKAGE_LIST" ] ; then
    return 1
  fi
  dedupe_packages
  cat "$PACKAGE_LIST" | grep -v "$1" > "$PACKAGE_LIST.tmp"
  mv "$PACKAGE_LIST.tmp" "$PACKAGE_LIST"
}

#  install_package
#  ===============
#
#  Install a package unconditionally, ignoring the package list.
#
#  USAGE
#  =====
#
#    $1 . . . the package to be installed
#
#  RETURNS
#  =======
#
#    If the package does not exist, returns 1 and prints an error.
#
#    If the package does not have an installer, returns 1 and prints an error.
#
#    In all other cases, the return code of the installer script is returned.
#
install_package () {
  local PACKAGE="$1"
  local REPO="`get_package_repo "$PACKAGE"`"
  local PACKAGE_PATH="`realpath "$NET_CDANIELS_TOOLCHEST_DIR/packages/$REPO/$PACKAGE"`"
  # make sure the package exists
  if [ ! -d "$PACKAGE_PATH" ] ; then
    echo "ERROR T288: no such package directory $PACKAGE_PATH"
    return 1
  fi

  cd "$PACKAGE_PATH"

  if [ -e "./Makefile" ] ; then
    NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" \
    PACKAGE_NAME="$PACKAGE" \
    PACKAGE_PATH="$PACKAGE_PATH" \
    make install
    RET=$?
  elif [ -e "./makefile" ] ; then
    NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" \
    PACKAGE_NAME="$PACKAGE" \
    PACKAGE_PATH="$PACKAGE_PATH" \
    make install
    RET=$?
  elif [ -e "./install.sh" ] ; then
    NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" \
    PACKAGE_NAME="$PACKAGE" \
    PACKAGE_PATH="$PACKAGE_PATH" \
    ./install.sh "$@"
    RET=$?
  else
    echo "ERROR T304: package $PACKAGE has no installer"
    return 1
  fi

  return $RET

}

#  uninstall_package
#  =================
#
#  Uninstall a package unconditionally, ignoring the package list.
#
#  USAGE
#  =====
#
#    $1 . . . the package to be uninstalled
#
#  RETURNS
#  =======
#
#   If the package does not exist, returns 1 and prints an error
#
#   If the package does not have an uninstaller, returns 1 and prints an error
#
#   In all other cases, returns the exit code of the package uninstaller.
#
uninstall_package () {
  local PACKAGE="$1"
  local REPO="`get_package_repo "$PACKAGE"`"
  local PACKAGE_PATH="`realpath "$NET_CDANIELS_TOOLCHEST_DIR/packages/$REPO/$PACKAGE"`"
  # make sure the package exists
  if [ ! -d "$PACKAGE_PATH" ] ; then
    echo "ERROR T288: no such package directory $PACKAGE_PATH"
    return 1
  fi

  cd "$PACKAGE_PATH"

  if [ -e "./Makefile" ] ; then
    NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" \
    PACKAGE_NAME="$PACKAGE" \
    PACKAGE_PATH="$PACKAGE_PATH" \
    make uninstall
    RET=$?
  elif [ -e "./makefile" ] ; then
    NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" \
    PACKAGE_NAME="$PACKAGE" \
    PACKAGE_PATH="$PACKAGE_PATH" \
    make uninstall
    RET=$?
  elif [ -e "./uninstall.sh" ] ; then
    NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" \
    PACKAGE_NAME="$PACKAGE" \
    PACKAGE_PATH="$PACKAGE_PATH" \
    ./uninstall.sh "$@"
    RET=$?
  else
    echo "ERROR T359: package $PACKAGE has no uninstaller"
    return 1
  fi

  return $RET
}

#  get_package_repo
#  ================
#
#  Find a package's repo, and output the found repo on stdout.
#
#  USAGE
#  =====
#
#    $1 . . . the package to find the repo of
#
#  RETURNS
#  =======
#
#    Returns 0 on success
#
#    Returns 1 if the package is not found, or if another error is encountered
get_package_repo () {
  local STARTING_DIR=`pwd`
  local PACKAGE="$1"
  cd $NET_CDANIELS_TOOLCHEST_DIR/packages
  for candidate in */ ; do
    if [ -d "$candidate/$PACKAGE" ] ; then
      echo "$candidate" | tr -d "/"
      cd "$STARTING_DIR"
      return 0
    fi
  done
  cd "$STARTING_DIR"
  return 1

}


########10########20########30########40########50########60########70########80



DIRECTIVE="$1"
shift

case "$DIRECTIVE" in
########10########20########30##### PACKAGE ####50########60########70########80
  package)
    VERB="$1"
    shift
    PACKAGE="$1"
    if [ $# -ge 1 ] ; then
      shift
    fi

    PKG_DIR="$NET_CDANIELS_TOOLCHEST_DIR/packages/`get_package_repo $PACKAGE`/$PACKAGE"

    case "$VERB" in
      list)
        cd "$NET_CDANIELS_TOOLCHEST_DIR/packages"
        for dir in `find . -mindepth 2 -maxdepth 2 -type d` ; do
          PACKAGE_NAME="`basename $dir`"
          REPO_NAME="`get_package_repo $PACKAGE_NAME`"
          PACKAGE_PATH="$NET_CDANIELS_TOOLCHEST_DIR/packages/$REPO_NAME/$PACKAGE_NAME"
          printf "%30s/%-30s" "$REPO_NAME" "$PACKAGE_NAME"
          if [ -f "$PACKAGE_PATH/brief.txt" ] ; then
            echo " - `cat $PACKAGE_PATH/brief.txt`"
          else
            echo ""
          fi
        done
      ;;
      desc)
        toolchest package description $PACKAGE
      ;;
      description)
        DESCFILE="$PKG_DIR/description.txt"
        if [ -e "$DESCFILE" ] ; then
          cat $DESCFILE
        else
          echo "ERROR T370: no description provided for $PACKAGE"
          exit 1
        fi
      ;;
      install)

        # make sure the package is not already installed
        check_package_installed "$PACKAGE"
        if [ $? -eq 0 ] ; then
          echo "ERROR T526: package $PACKAGE is already installed. If this is"
          echo "            not correct, you may mark it as uninstalled using"
          echo "            \"toolchest internal package mark-uninstalled $PACKAGE\""
          
          if [ $# -ge 1 ] ; then
            $0 package install "$@"
            exit $?
          else
            exit 1
          fi
        fi

        # handle dependancy checking
        if [ -e "$PKG_DIR/dep" ] ; then

          if [ -f "$PKG_DIR/dep/system" ] ; then
            # validate system dependencies
            while read -r line ; do
              printf "INFO: verifying $line is present... "
              command -v $line > /dev/null
              if [ $? -ne 0 ] ; then
                echo "FAIL"
                echo "ERROR T699: dependancy $line is not present on the system"
                exit 1
              fi
              echo "OK"
            done < "$PKG_DIR/dep/system"
          fi  # if [ -f "$PKG_DIR/dep/system" ] ; then

          if [ -f "$PKG_DIR/dep/toolchest" ] ; then
            # attempt to install toolchest dependencies
            while read -r line ; do
              printf "INFO: verifying package $line is installed... "
              toolchest package list-installed | grep $line > /dev/null
              # grep will return nonzero if the string is not found
              if [ $? -eq 0 ] ; then
                # package is already marked installed
                echo "OK"
              else
                # package not installed, try installing it
                echo "NOT PRESENT"
                echo "INFO: will attempt to install package $line"
                # perform the install
                toolchest package install $line
                if [ $? -ne 0 ] ; then
                  echo "ERROR T717: failed to install dependency $line"
                  exit 1
                fi
              fi
            done < "$PKG_DIR/dep/toolchest"
          fi  # if [ -f "$PKG_DIR/dep/toolchest" ] ; then

          # handle OS validation
          if [ -f "$PKG_DIR/dep/uname" ] ; then
            printf "INFO: validating OS requirements... "
            grep `uname` < "$PKG_DIR/dep/uname" > /dev/null
            if [ $? -eq 0 ] ; then
              echo "OK"
            else
              echo "ERROR: OS `uname` is not supported by this package!"
              exit 1
            fi
          fi  # if [ -f "$PKG_DIR/dep/uname" ] ; then

          # attempt to download any artifacts required
          if [ -f "$PKG_DIR/dep/remote" ] ; then
            mkdir "$PKG_DIR/remote"
            DOWNLOAD_CMD="$NET_CDANIELS_TOOLCHEST_DIR/bin/download"
            if [ ! -f "$DOWNLOAD_CMD" ] ; then
              echo "ERROR T789: unable to locate download command"
            else
              while read -r line ; do
                ARTIFACT_NAME=`echo $line | cut -d\  -f 1`
                ARTIFACT_URL=`echo $line | cut -d\  -f 2`
                echo "INFO: preparing to download dependancy: $ARTIFACT_NAME"
                "$DOWNLOAD_CMD" "$ARTIFACT_URL" "$PKG_DIR/remote/$ARTIFACT_NAME"
                if [ $? -eq 0 ] ; then
                  echo "INFO: successfully downloaded dependancy $ARTIFACT_NAME."
                else
                  echo "ERROR: FAILED to download dependancy $ARTIFACT_NAME"
                fi
              done < "$PKG_DIR/dep/remote"
            fi  # if [ ! -f "$DOWNLOAD_CMD" ] ; then
          fi  # if [ -f "$PKG_DIR/dep/remote" ] ; then

        fi  # if [ -e "$PKG_DIR/dep" ] ; then

        # perform the package installation
        install_package "$PACKAGE"

        # handle installation failure
        if [ $? -ne 0 ] ; then
          echo "ERROR T376: installer failed, attempting to clean up."
          uninstall_package "$PACKAGE"
          exit 1
        else
          # mark package installed
          mark_package_installed "$PACKAGE"
        fi

        if [ $# -ge 1 ] ; then
          $0 package install "$@"
        fi
      ;;
      uninstall)
        # make sure the package is actually installed
        check_package_installed "$PACKAGE"
        if [ $? -ne 0 ] ; then
          echo "ERROR T566: package $PACKAGE is not installed. If this is"
          echo "            not correct, you may mark it as installed using"
          echo "            \"toolchest internal package mark-installed $PACKAGE\""

          if [ $# -ge 1 ] ; then
            $0 package uninstall "$@"
            exit $?
          else
            exit 1
          fi
        fi

        uninstall_package "$PACKAGE"
        RET=$?

        if [ $RET -eq 0 ] ; then
          # installed succeeded, mark uninstalled
          mark_package_uninstalled "$PACKAGE"
          exit 0
        else
          # handle case where the package failed to be uninstalled
          echo "ERROR T592: package uninstaller for $PACKAGE failed!"
          exit $RET
        fi

        if [ $# -ge 1 ] ; then
          $0 package uninstall "$@"
        fi

      ;;
      update)
        echo "INFO: updating package $PACKAGE"
        toolchest package uninstall "$PACKAGE"
        toolchest package install "$PACKAGE"
      ;;
      status)
        check_package_installed "$PACKAGE"
        if [ $? -eq 0 ] ; then
          echo "INFO: package $PACKAGE is INSTALLED"
        else
          echo "INFO: package $PACKAGE is NOT installed"
        fi
      ;;
      list-installed)
        if [ ! -f "$PACKAGE_LIST" ] ; then
          echo "INFO: package list not initialized; either no packages are"
          echo "      installed, or your toolchest installation is broken."
        else
          cat "$PACKAGE_LIST"
        fi
      ;;
      *)
        echo "ERROR T282: package verb \"$VERB\" was not recognized"
        exit 1
      ;;
    esac
  ;;
########10########20########30#### INTERNAL ####50########60########70########80
  internal)
    INTERNAL_DIRECTIVE="$1"
    shift
    case "$INTERNAL_DIRECTIVE" in
      package)
        VERB="$1"
        shift
        PACKAGE="$1"
        shift

        case "$VERB" in
          unconditional-install)
            install_package "$PACKAGE"
            exit $?
          ;;
          unconditional-uninstall)
            uninstall_package "$PACKAGE"
            exit $?
          ;;
          mark-installed)
            mark_package_installed "$PACKAGE"
            exit $?
          ;;
          mark-uninstalled)
            mark_package_uninstalled "$PACKAGE"
          ;;
          get-repo)
            get_package_repo "$PACKAGE"
          ;;
        esac
      ;;
    esac
  ;;
########10########20########30###### MISC ######50########60########70########80
  info)
    echo "INFO: toolchest configuration: "
    echo "NET_CDANIELS_TOOLCHEST_DIR . . . $NET_CDANIELS_TOOLCHEST_DIR"
  ;;
  "")
    toolchest info
  ;;
  dir)
    echo "$NET_CDANIELS_TOOLCHEST_DIR"
    exit 0
  ;;
  version)
    echo "net.cdaniels.toolchest $TOOLCHEST_VERSION"
  ;;
  refresh)
    cd "$NET_CDANIELS_TOOLCHEST_DIR"
    mv local local.bak
    mkdir "$NET_CDANIELS_TOOLCHEST_DIR/local"
    mkdir "$NET_CDANIELS_TOOLCHEST_DIR/local/bin"
    mkdir "$NET_CDANIELS_TOOLCHEST_DIR/local/lib"
    mkdir "$NET_CDANIELS_TOOLCHEST_DIR/local/log"
    mkdir "$NET_CDANIELS_TOOLCHEST_DIR/local/backup"
    mkdir "$NET_CDANIELS_TOOLCHEST_DIR/local/config"
    cp -r local.bak/config/* local/config/
    rm local/config/packages.list
    for packagename in `cat local.bak/config/packages.list` ; do
      toolchest package install "$packagename"
    done
    rm -rf local.bak
  ;;
  setup)
    for dir in local local/bin local/lib local/log local/backup local/config ; do
      FULLDIR="$NET_CDANIELS_TOOLCHEST_DIR/$dir"
      if [ ! -e "$FULLDIR" ] ; then
        printf "INFO: \"$FULLDIR\" does not exist, creating it... "
        mkdir -p "$FULLDIR"
        if [ $? -ne 0 ] ; then
          echo "FAIL"
          echo "ERROR: failed to create \"$FULLDIR\""
          exit 1
        else
          echo "OK"
        fi
      fi
    done

    printf "INFO: validating realpath in PATH... "
    which realpath | grep realpath > /dev/null
    if [ $? -ne 0 ] ; then
      echo "FAIL"
      printf "INFO: symlinking normalize-path to realpath..."
      ln -s $NET_CDANIELS_TOOLCHEST_DIR/bin/normalize-path $NET_CDANIELS_TOOLCHEST_DIR/bin/realpath
    fi
    echo "DONE"

    which md5sum | grep md5sum > /dev/null
    if [ $? -eq 0 ] ; then
      which md5 | grep md5 > /dev/null
      if [ $? -ne 0 ] ; then
        printf "INFO: symlinking md5sum to md5... "
        ln -s `which md5sum` $NET_CDANIELS_TOOLCHEST_DIR/bin/md5
        echo "DONE"
      fi
    fi

    touch "$NET_CDANIELS_TOOLCHEST_DIR/local/config/setup-done"
    echo "INFO: setup finished successfully"
  ;;
  *)
    echo "ERROR T46: no such directive $DIRECTIVE"
  ;;
esac
