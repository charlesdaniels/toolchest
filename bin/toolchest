#!/bin/sh
########10########20########30## DOCUMENTATION #50########60########70########80
#
#  OVERVIEW
#  ========
#  
#  Utility for managing and installing toolchest, as well as toolchest packages. 
#  
#  The toolchest ships with a set of core utilities, kept in the bin/ folder
#  (the same directory as this file). These are scripts and utilities which
#  are used commonly enough by toolchest packages that they need to be present
#  always. They are usually bourne shell scripts, and should be portable
#  across any POSIX compliant system.
#  
#  The toolchest also ships a set of optional packages, in the packages/
#  directory. These may be installed using `toolchest package install`.
#  Packages may or may not be fully portable, may have their own dependencies,
#  and may even involve compilation. Package install scripts should handle any
#  dependency resolution that is needed.
#  
#  Core utilities and libraries are kept in bin/ and lib/ respectively,
#  relative to installation root. local/bin/ and local/lib/ relative to
#  project root hold symlinks to build artifacts from packages. Things in
#  local/ should not be version controlled, but should be re-producible by
#  script (on the same system).
#  
#  NOTE ON MULTIPLE INSTALLS
#  =========================
#  
#  While technically a supported configuration, it is probably not a good idea
#  to have multiple installs of toolchest (eg. a system and a local install).
#  This may make both installations difficult to manage. Multiple separate
#  users having local installations should not cause any problems however.
#  
#  
#  INSTALLATION TYPES
#  ==================
#  
#  There are exactly two supported toolchest installation types: system and
#  local. System installations live in /opt/net.cdaniels.toolchest, while
#  local installations live in $HOME/.net.cdaniels.toolchest . Call the 
#  install folder TOOLCHEST_DIR
#  
#  There are two bin folders, $TOOLCHEST_DIR/bin, and $TOOLCHEST_DIR/local/bin .
#  Both should be added to $PATH in order to use the toolchest coreutils and 
#  any installed packages. 
#  
#  USAGE
#  =====
#  
#    install  . . . . . . . . . . . . prompts for install type, then performs
#                                     the install
#         
#    install system . . . . . . . . . perform a system-wide toolchest installation
#         
#    install local  . . . . . . . . . install the toolchest in $HOME
#         
#    uninstall  . . . . . . . . . . . uninstall the toolchest. If only a local
#                                     or only a system install is present, it
#                                     will be uninstalled. If both are
#                                     present, the script will error.
#         
#    uninstall local  . . . . . . . . uninstall the toolchest from $HOME
#         
#    uninstall system . . . . . . . . uninstall the system-wide installation
#         
#    package list . . . . . . . . . . list available packages
#    
#    package install [package]  . . . install [package]
#    
#    package uninstall [package]  . . uninstall [package]
#    
#    package update [package] . . . . uninstall, then install [package]
#    
#    package description [package]  . display [package]'s description
#    
#    info . . . . . . . . . . . . . . display toolchest's configuration
#
#    version  . . . . . . . . . . . . display the toolchest's version
#    
#  PACKAGES
#  ========
#  
#  Packages should reside in directories within packages/ relative to
#  installation root. Each directory must contain one of: makefile, Makefile,
#  install.sh. When `toolchest package install` is run, if a makefile is
#  present in the packages directory, then `make install` will be run.
#  Otherwise `install.sh` will be run. In either case, the calling shell first
#  cds to the top level directory of the package.
#   
#  If install.sh is used, it will be passed "$@" which will include argv[3]
#  and on. Further, NET_CDANIELS_TOOLCHEST_DIR will be explicitly set as an
#  environment variable when executing the installer.
#  
#  If using makefiles, packages should also implement `make uninstall` for de-
#  installation. Packages using install.sh should also make available an
#  uninstall.sh for the same purpose. uninstall.sh and `make uninstall` are
#  called in the same way as their counterparts.
#    
#  ENVIORNMENT VARIABLES
#  =====================
#  
#    NET_CDANIELS_TOOLCHEST_DIR . . . existing toolchest install directory.
#                                     This is the toolchest install that the
#                                     script will manage. This environment
#                                     variable is the supported method for
#                                     managing both a local and a system wide
#                                     installation on the same machine. If not
#                                     set, it will be extrapolated at runtime.
#                                     If only a system or only a local
#                                     installation exists, it will be used. If
#                                     both exist, the local install will be
#                                     preferred.
#    
#    
#  AUTHOR'S NOTE ON STOW
#  =====================
#  
#  Typically, stow would make a lot of sense to use for a project with as much
#  symlinking going on as toolchest. However, in my experience GNU stow is not
#  widely available on many systems. It is not present in the base
#  installation of macOS, nor in the base installation of FreeBSD 11 or Ubuntu
#  16. By removing stow as a dependency, the toolchest should be able to run
#  on a wide variety of systems without needing either root access (to use
#  the package manager) or fooling around with compiling stow from source.
#  
#  As someone who has used stow fairly extensively, I very much respect stow
#  and it's capabilities, but sadly re-inventing the wheel in this respect is
#  a design decision I have made to improve portability.
#    
#    
########10########20########30##### LICENSE ####50########60########70########80
#  Copyright (c) 2016, Charles Daniels
#  All rights reserved.
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
# 
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#  
########10########20########30########40########50########60########70########80

# this forces home to be resolved to it's actual path, which fixes several
# breakages when sanity checking installation locations.
export HOME="$(realpath $HOME)"

SYSTEM_INSTALL_DIR="/opt/net.cdaniels.toolchest"
LOCAL_INSTALL_DIR="$HOME/.net.cdaniels.toolchest"
TOOLCHEST_VERSION="0.0.3-ALPHA"

command -v realpath > /dev/null
if [ $? -ne 0 ] ; then
  echo "ERROR T170: command \"realpath\" is not available"
  exit 1
fi

command -v sed > /dev/null
if [ $? -ne 0 ] ; then
  echo "ERROR T180: command \"sed\" is not available"
  exit 1
fi

# check if NET_CDANIELS_TOOLCHEST_DIR already exists (from env), and if not
# try to detect 
if (: "${NET_CDANIELS_TOOLCHEST_DIR?}") 2>/dev/null; then
  printf ""  # do nothing
else
  # this used to be $0/../.. however this breaks on BSD sh, and possible other
  # shells. The sed command matches "toolchest", followed by a line ending,
  # and replaces it with nothing. Although this is uglier, it will work on
  # more systems.
  NET_CDANIELS_TOOLCHEST_DIR=$(realpath `echo $0 | sed 's/toolchest$//g'`/..)
fi

if [ "$NET_CDANIELS_TOOLCHEST_DIR" != "$SYSTEM_INSTALL_DIR" ] ; then
  if [ "$NET_CDANIELS_TOOLCHEST_DIR" != "$LOCAL_INSTALL_DIR" ] ; then
    printf "WARNING T176: toolchest running from an unsupported location: "
    echo $NET_CDANIELS_TOOLCHEST_DIR
  fi
fi

# make sure that we are somewhere in $PATH (toolchest likes to recursively
# call itself)
command -v toolchest > /dev/null
if [ $? -ne 0 ] ; then
  if [ "$1" == "install" ] ; then 
    # the installer is not guaranteed to run from $PATH
    printf ""  # do nothing
  else
    echo "ERROR T196: toolchest executable not in \$PATH"
    exit 1
  fi
fi

DIRECTIVE="$1"
shift

case "$DIRECTIVE" in
########10########20########30##### INSTALL ####50########60########70########80
  install)
    INSTALL_TYPE="$1"
    shift
    case "$INSTALL_TYPE" in
      local)
        echo "INFO: selected install type local"

        # make sure we don't have an existing installation
        TOOLCHEST_DIR="$LOCAL_INSTALL_DIR"
       
      ;;
      system)
        echo "INFO: selected install type system"

        # make sure we are root
        if [ `whoami` != "root" ] ; then
          echo "ERROR T88: must be root to perform system install"
          exit 1
        fi
        TOOLCHEST_DIR="$SYSTEM_INSTALL_DIR"
      ;;
      *)
        printf "QUERY: install type (system, local) > "
        read INSTALL_TYPE
        ./"$0" install $INSTALL_TYPE
        exit $?
      ;;
    esac

    # make sure we have things we need
    printf "INFO: preflight check... "
    # check for realpath was moved to the top of this file, but this might be
    # a handy spot to put some test in later
    echo "DONE"

    if [ -e "$TOOLCHEST_DIR" ] ; then
      echo "ERROR T53: $TOOLCHEST_DIR already exists, refusing to overwrite"
      exit 1
    fi

    # make sure the installer is being run from the right folder
    if [ ! -f ./bin/toolchest ] ; then
      echo "ERROR T61: toolchest install must be run from the top level"
      echo "           folder of the toolchest project"
      exit 1
    fi

    # note: we use tar in a somewhat unusual way here, this is to preserve
    # symlinks regardless of wheather we are working with GNU or BSD style cp
    # 
    # original SO post: http://superuser.com/a/138604

    # copy folders into place and set up folder structure
    mkdir -p "$TOOLCHEST_DIR"
    ( cd ./bin ; tar cf - . ) | ( cd "$TOOLCHEST_DIR/bin" ; tar xf - )
    ( cd ./lib ; tar cf - . ) | ( cd "$TOOLCHEST_DIR/lib" ; tar xf - )
    ( cd ./packages ; tar cf - . ) | ( cd "$TOOLCHEST_DIR/packages" ; tar xf - )
    mkdir "$TOOLCHEST_DIR/local"
    mkdir "$TOOLCHEST_DIR/local/bin"
    mkdir "$TOOLCHEST_DIR/local/lib"
    mkdir "$TOOLCHEST_DIR/local/log"
    mkdir "$TOOLCHEST_DIR/local/backup"
    mkdir "$TOOLCHEST_DIR/local/config"

    # if we are installing from a git clone, carry over .git and
    # .gitignore
    if [ -e ./.git ] ; then
      echo "INFO: it looks like you are installing from a git clone"
      printf "QUERY: carry over .git and .gitignore to installation? (y/n) > "
      read RESPONSE

      if [ "$RESPONSE" == "y" ] ; then
        cp -r ./.git "$TOOLCHEST_DIR/"
        cp ./.gitignore "$TOOLCHEST_DIR/"
        cp ./README.rst "$TOOLCHEST_DIR"
      elif [ "$RESPONSE" == "n" ] ; then
        printf ""  # do nothing
      else
        echo "ERROR T259: invalid response (choices are: y, n)"
        echo "INFO: installation incomplete, cleaning up..."
        ./"$0" uninstall $INSTALL_TYPE
        exit 1
      fi
    fi  # if [ -e ./.git ] ; then

    # finish up
    echo "INFO: installation complete."
    echo "INFO: please add $TOOLCHEST_DIR/bin to \$PATH"
    echo "INFO: please add $TOOLCHEST_DIR/local/bin to \$PATH"
    exit 0 
  ;;
########10########20########30#### UNINSTALL ###50########60########70########80
  uninstall)
    UNINSTALL_TYPE="$1"
    shift

    case "$UNINSTALL_TYPE" in
      local)
        echo "INFO: removing local toolchest installation"
        TOOLCHEST_DIR="$LOCAL_INSTALL_DIR"
      ;;
      system)
        echo "INFO: removing system toolchest installation"
        TOOLCHEST_DIR="$SYSTEM_INSTALL_DIR"
      ;;
      *)
        # check to see if there is only one install on the system, if so 
        # we will uninstall that
        if [ -e "$SYSTEM_INSTALL_DIR" ] ; then
         if [ -e "$LOCAL_INSTALL_DIR" ] ; then
            echo "ERROR T117: both $SYSTEM_INSTALL_DIR and $LOCAL_INSTALL_DIR"
            echo "            exit. Please specify uninstall type explicitly"
            exit 1
          fi
          toolchest uninstall system
          exit $?
        fi
        if [ -e "$LOCAL_INSTALL_DIR" ] ; then
          toolchest uninstall local
          exit $?
        fi
      ;;
    esac
    
    # this shouldent happen, but sanity checking is good
    echo "INFO: uninstalling toolchest from $TOOLCHEST_DIR"
    if [ ! -e "$TOOLCHEST_DIR" ] ; then
      echo "ERROR T136: no toolchest installation found at $TOOLCHEST_DIR"
      exit 1
    fi

    # give the uesr time to cancel
    printf "INFO: sleeping 5 seconds..."
    sleep 5
    echo "DONE"

    # actually do the uninstall
    printf "INFO: performing uninstall... "
    rm -rf "$TOOLCHEST_DIR"
    echo "DONE"
    RET="$?"
    echo "INFO: uninstall complete."
    exit "$RET"

  ;;
########10########20########30##### PACKAGE ####50########60########70########80
  package)
    VERB="$1"
    shift
    PACKAGE="$1"
    shift

    case "$VERB" in
      list)
        cd "$NET_CDANIELS_TOOLCHEST_DIR/packages"
        for dir in * ; do
          if [ -e $dir/brief.txt ] ; then
            # if a brief is provided, show it
            printf "%20s - %s\n" "$dir" "`cat $dir/brief.txt`"
          else
            # otherwise just show the package name
            printf "%20s\n" "$dir"
          fi
        done
      ;;
      desc)
        toolchest package description $PACKAGE
      ;;
      description)
        DESCFILE="$NET_CDANIELS_TOOLCHEST_DIR/packages/$PACKAGE/description.txt"
        if [ -e "$DESCFILE" ] ; then
          cat $DESCFILE
        else
          echo "ERROR T370: no description provided for $PACKAGE"
          exit 1
        fi
      ;;
      install)
        # make sure the package exists
        if [ ! -d "$NET_CDANIELS_TOOLCHEST_DIR/packages/$PACKAGE" ] ; then
          echo "ERROR T288: no suck package directory $PACKAGE"
          exit 1
        fi

        cd "$NET_CDANIELS_TOOLCHEST_DIR/packages/$PACKAGE"

        if [ -e "./Makefile" ] ; then
          NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" make install 
          RET=$?
        elif [ -e "./makefile" ] ; then
          NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" make install
          RET=$?
        elif [ -e "./install.sh" ] ; then
          NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" ./install.sh "$@"
          RET=$?
        else
          echo "ERROR T304: package $PACKAGE has no installer"
          exit 1
        fi

        if [ $RET -ne 0 ] ; then
          echo "ERROR T376: installer failed, attempting to clean up."
          toolchest package uninstall "$PACKAGE"
        fi
      ;;
      uninstall)
        # make sure the package exists
        if [ ! -d "$NET_CDANIELS_TOOLCHEST_DIR/packages/$PACKAGE" ] ; then
          echo "ERROR T288: no suck package directory $PACKAGE"
          exit 1
        fi

        cd "$NET_CDANIELS_TOOLCHEST_DIR/packages/$PACKAGE"

        if [ -e "./Makefile" ] ; then
          NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" make uninstall 
          exit $?
        elif [ -e "./makefile" ] ; then
          NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" make uninstall
          exit $?
        elif [ -e "./uninstall.sh" ] ; then
          NET_CDANIELS_TOOLCHEST_DIR="$NET_CDANIELS_TOOLCHEST_DIR" ./uninstall.sh "$@"
          exit $?
        else
          echo "ERROR T359: package $PACKAGE has no uninstaller"
          exit 1
        fi
        
      ;;
      update)
        echo "INFO: updating package $PACKAGE"
        toolchest package uninstall "$PACKAGE"
        toolchest package install "$PACKAGE"
      ;;
      *)
        echo "ERROR T282: package verb \"$VERB\" was not recognized"
        exit 1
      ;;
    esac
    
  ;;
  info)
    echo "INFO: toolchest configuration: "
    echo "NET_CDANIELS_TOOLCHEST_DIR . . . $NET_CDANIELS_TOOLCHEST_DIR"
    echo "LOCAL_INSTALL_DIR  . . . . . . . $LOCAL_INSTALL_DIR"
    echo "SYSTEM_INSTALL_DIR . . . . . . . $SYSTEM_INSTALL_DIR"
  ;;
  "")
    toolchest info
  ;;
  version)
    echo "net.cdaniles.toolchest $TOOLCHEST_VERSION"
  ;;
  *)
    echo "ERROR T46: no such directive $DIRECTIVE"
  ;;
esac
