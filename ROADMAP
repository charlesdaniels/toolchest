check-connection:

  * gateway is hardcoded, should be detected from ifconfig (?)

  * depends on speedtest-cli - maybe silently skip speedtest if not installed?

  * need a tool to bulk analyze output of script (eg. generate speed and
    uptime graphs over time)

pdfutils:

  * need support for additional OCR tools

pkgutils:

  * pkg-housecleaning could use a code review, it hasn't been reviewed in
    over a year

systemutils:

  * DPI_SCRIPT points to a file that no longer exists

toolchest:

  * the toolchest management utility (i.e. the ``toolchest`` command) has
    become a bit unwieldy in terms of size (> 1k LOC). It should probably be
    split apart into libraries.

  * it would be neat if missing ``system`` dependancies could automatically
    be searched using a tool like static-get and installed to local/bin. 

    static-get: http://javier.io/blog/en/2015/06/23/static-get.html

  * an updater should be added, which given the path to a .tar.gz or directory
    with a newer toolchest version which can update the local installation 
    with the new version. 

  * there should be a standardized way to add optional "system" dependancies
    to the dep/ tree. See for example the preinstall script for universal-tools
    where there are several dependancies which are not required for core
    package functionality, but enable some componants of it. 

carbonite:

  * remove limitation where payload filename cannot contain spaces

  * extract-execute.lib does not validate checksums at this time

net.cdaniels.python:

  * should add a python wrapper for temputils

  loggingutils:

    * default log path should probably go to /tmp, rather than ./
runtime:

  * it should be possible to package the toolchest coreutils and (maybe)
    installed packages into a runtime via carbonite, which can be used by
    standalone scripts that are not toolchest packages, but wish to depend on
    the toolchest or packages.

    This will probably involve having a launcher script that adds the runtime
    prefix to $PATH. The difficult part will be handling packages... maybe if
    support was added for running the toolchest from locations other than
    $HOME/.net.cdaniels.toolchest and /opt/.net.cdaniels.toolchest, then the
    user could specify the desired packages and payload, the whole thing could
    be built as a fresh install in /tmp, then the launcher script and payload
    copied in and bundled via carbonite.


sort-notes:

  * should be configurable via local/config

audioutil:

  * new script, audioutil-namebytag, which would rename a media file according
    to it's metadata tags

  * new script, audioutil-organize, which would leverage audioutil-namebytag
    to validate folder structure, file naming conventions, and tags

archiveutil:

  * archive-create should utilize streams for compression. That is, the
    archive tarball will be generated first, then piped through gz or xz to
    produce the output file. While this does not confer any obvious benefit
    over simply using cvfz/cvfJ, it will make it easier to plug in tools like
    pv, and will also improve compatibility with older versions of tar which
    lack native support for gz and/or xz.

  * it may be worthwhile to create a slightly more advanced archive format, 
    perhaps by splitting files into, say, 100M chunks, then generating parity 
    blocks using par2, then compressing each individual file with gz/xz as 
    before. This would confer a number of potential benefits, for one both 
    compressions and decompression could be easily parallelized using off the
    shelf tools like parallel, and adding parity would improve archive durability. 
    Further, this would not reduce compatibility, as anyone in the future 
    who can decompress gz/xz files should be able to concatenate the results, 
    even if not on UNIX systems. The par2 parity files may be rendered useless
    in the future, but provided the chunks of the archive are not corrupt, 
    that will not prevent the archive from being reconstructed. 

    The compatibility of gz/xz/tar with future systems as moot, as archive-
    create already creates those anyway.

1.1.X release series:

  * As I no longer use audioutil, it will likely be placed in the 
    net.cdaniels.toolchest.legacy repo

  * Any "legacy" packages which still have not been updated to work correctly
    with the 1.0.X release series will likely be removed permanently, probably
    by creating a new repo (net.cdaniels.toolchest.deprecated). 

  * repoman will become part of coreutils

  * A tool needs to be added to detect broken symlinks left over during updates.
    The 1.1.X series will likely involve mass shuffling of packages and repos,
    and will probably cause the same such problems as the 1.0.0 release did. 
    This tool should be called as part of the refresh operation. 

  * Some repos and packages which are currently in the base install will
    likely be moved to external git repos and will be accessible via repoman. 
    Some thought will need to go into which packages and repos should really be
    part of the standard base install, and which should not. 
